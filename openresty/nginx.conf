worker_processes 1;

pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    # 既存ヘッダが無ければ $request_id を生成して使う
    map $http_x_request_id $req_id {
        default $http_x_request_id;
        ""      $request_id;
    }

    # 上流（Coraza/Go）— 既存
    upstream coraza_backend {
        ${NGX_CORAZA_UPSTREAM}
    }

    ##
    ## Proxy Cache 設定
    ##
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=mamo:50m
                     max_size=2g inactive=30m use_temp_path=off;

    client_body_temp_path /tmp/client_temp;
    proxy_temp_path       /tmp/proxy_temp;
    fastcgi_temp_path     /tmp/fastcgi_temp;
    uwsgi_temp_path       /tmp/uwsgi_temp;
    scgi_temp_path        /tmp/scgi_temp;

    # 特殊な時だけファイルにも保存する条件
    map $status $is_err {
        default 0;
        ~^[45].. 1;
    }

    map $upstream_http_x_waf_hit $waf_hit {
        default 0;
        ~.+ 1;
    }

    map $uri $is_suspicious_path {
        default 0;
        ~^/(wp-|xmlrpc\.php|\.git|\.env) 1;
    }

    # $request_time は "0.123" のような文字列。先頭が1-9なら >=1s とみなす
    map $request_time $is_slow {
        default 0;
        ~^[1-9] 1;
    }

    # どれか1つでも立てば「候補」
    map "$is_err$is_slow$is_suspicious_path$waf_hit" $log_pre {
        default 0;
        ~1      1;
    }

    # 静的アセット判定
    map $uri $is_static {
        default 0;
        ~*\.(js|mjs|css|map|png|jpe?g|webp|svg|ico|gif|woff2?|ttf|eot|mp4|webm|ogg|wasm)$ 1;
        # Next.jsの開発用JSONだけ静的扱いにしたい場合
        # ~^/_next/static/.+\.json$ 1;
    }

    # 最終判定
    # - エラー(4xx/5xx) は静的でも残す
    # - それ以外は「候補」かつ 非静的 のときだけ残す
    map "$is_err$log_pre$is_static" $log_to_file {
        default 0;
        ~^1..$  1;
        "010"   1;
    }

    # 1行JSONログ（NDJSON）
    log_format json_agg escape=json
      '{"ts":"$time_iso8601","req_id":"$req_id","ip":"$remote_addr",'
      '"method":"$request_method","path":"$uri","qs":"$args",'
      '"waf_hit":$waf_hit,"waf_rules":"$upstream_http_x_waf_ruleids",'
      '"status":$status,"upstream_status":"$upstream_status",'
      '"rt":$request_time,"urt":"$upstream_response_time","ua":"$http_user_agent"}';

    # 標準出力（CloudWatch / docker logs 用）— 全件
    access_log /dev/stderr json_agg;
    # 特殊なものだけファイルにも二重出力（エラー / WAFヒット / 怪しい / 遅い）
    access_log /data/logs/openresty/interesting.ndjson json_agg if=$log_to_file;
    error_log  /dev/stderr  warn;

    # メソッド種別
    map $request_method $is_get {
        default 0;
        GET     1;
        HEAD    1;
    }

    # 上流からの合図（Coraza → ModifyResponse で付与）
    map $upstream_http_x_mamotama_cacheable $mamo_cacheable {
        default 0;
        "1"     1;
    }

    # 認証・Cookie 付きはキャッシュ禁止
    map $http_authorization $has_auth {
        default 0;
        ~.+:    1;
    }
    map $http_cookie $has_cookie {
        default 0;
        ~.+:    1;
    }

    # /mamotama-api/ は常に非キャッシュ
    map $request_uri $is_api {
        default                         0;
        ~^${NGX_CORAZA_API_BASEPATH}    1;
    }

    # 総合判定（1 なら no-cache / cache-bypass）
    map "$is_get$has_auth$has_cookie$mamo_cacheable$is_api" $mamo_nocache {
        # GET/HEAD 以外
        ~^0               1;
        # 認証 or Cookie あり
        ~^1(1|0)1         1;
        ~^1(0|1)1         1;
        # 上流合図なし
        ~^1..0.           1;
        # API
        ~^....1           1;
        default           0;
    }

    server {
        listen 80;

        ##
        ## 静的/アプリへのプロキシ
        ##
        location / {
            proxy_pass http://coraza_backend;
            proxy_set_header Host              $http_host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Request-ID      $req_id;
            proxy_hide_header X-WAF-Hit;
            proxy_hide_header X-WAF-RuleIDs;

            proxy_http_version 1.1;
            proxy_set_header Upgrade           $http_upgrade;
            proxy_set_header Connection        "upgrade";
            proxy_read_timeout ${NGX_BACKEND_RESPONSE_TIMEOUT};

            proxy_cache            mamo;
            proxy_cache_key        "$scheme://$host$request_uri";
            proxy_cache_valid      200 301 302 10m;
            proxy_cache_valid      404 1m;
            proxy_ignore_headers   Set-Cookie;
            proxy_cache_use_stale  error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;

            proxy_no_cache         $mamo_nocache;
            proxy_cache_bypass     $mamo_nocache;
        }

        ##
        ## 管理UI
        ##
        location ${NGX_CORAZA_ADMIN_URL} {
            proxy_pass http://web:5173;
            proxy_set_header Host              $http_host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Request-ID      $req_id;
            proxy_http_version 1.1;
            proxy_set_header Upgrade           $http_upgrade;
            proxy_set_header Connection        "upgrade";
            proxy_read_timeout ${NGX_BACKEND_RESPONSE_TIMEOUT};

            proxy_no_cache     1;
            proxy_cache_bypass 1;
        }
    }

    resolver 8.8.8.8;
}
